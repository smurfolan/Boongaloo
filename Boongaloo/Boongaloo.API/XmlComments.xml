<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Boongaloo.API</name>
    </assembly>
    <members>
        <member name="T:Boongaloo.API.Controllers.ApiDocumentationController">
            <summary>
            Consider moving this helper controller away and replace it with proper documenting tool. E.g. Swagger/Swashbuckle.
            </summary>
        </member>
        <member name="M:Boongaloo.API.Controllers.AreaController.Get(System.Int32)">
            <summary>
            Example: GET /api/v1/areas/{id:int}
            </summary>
            <param name="id">Id of the area.</param>
            <returns>Returns area by its id.</returns>
        </member>
        <member name="M:Boongaloo.API.Controllers.AreaController.Get(System.Double,System.Double)">
            <summary>
            Example: GET /api/v1/areas/{lat:double}/{lon:double}/
            </summary>
            <param name="lat">Latitude</param>
            <param name="lon">Longitude</param>
            <returns>All the areas around coordinates.</returns>
        </member>
        <member name="M:Boongaloo.API.Controllers.AreaController.GetUsers(System.Int32)">
            <summary>
            Example: GET api/v1/areas/{id:int}/users
            </summary>
            <param name="id">Id of the area.</param>
            <returns>All the users falling into specific area</returns>
        </member>
        <member name="M:Boongaloo.API.Controllers.AreaController.Post(Boongaloo.Repository.BoongalooDtos.AreaDto)">
            <summary>
            Example: POST api/v1/areas
            </summary>
            <param name="area">Sample post: {'radius':50, 'latitude': 23.1233123,'longitude': 43.1231232}</param>
            <returns>HTTP Status of 201 code if area was successfuly created.</returns>
        </member>
        <member name="M:Boongaloo.API.Controllers.GroupsController.Get(System.Double,System.Double)">
            <summary>
            Example: GET /api/v1/groups/{lat:double}/{lon:double}/
            </summary>
            <param name="lat">Latitude</param>
            <param name="lon">Longitude</param>
            <returns>All the groups that contain this point(lat/lon) as part of their diameter</returns>
        </member>
        <member name="M:Boongaloo.API.Controllers.GroupsController.Post(Boongaloo.Repository.BoongalooDtos.StandaloneGroupRequestDto)">
            <summary>
            Example: POST /api/v1/groups
            </summary>
            <param name="newGroup">Body sample:{'name':'Second floor cooks', 'tagIds':[4,1], 'areaIds':[1],'userIds':[1]}</param>
            <returns>HTTP Code 201 if successfuly created and 500 if not.</returns>
        </member>
        <member name="M:Boongaloo.API.Controllers.GroupsController.Post(Boongaloo.Repository.BoongalooDtos.GroupAsNewAreaRequestDto)">
            <summary>
            Example: POST /api/v1/groups/AsNewArea
            </summary>
            <param name="newGroup">Body sample:{'name':'Second floor cooks', 'tagIds':[4,1], 'areaIds':[1], 'userIds':[1], 'latitude':42.657064, 'longitude':23.28539, 'radius':50}</param>
            NOTE: 'AreaIds':[1] -> This is not the Id of the newly created area. This is all the other area ids if we were in the range of other areas but no matter of that we decided to create new area. 
            <returns>Uniqe identifier of the newly created group entity</returns>
        </member>
        <member name="M:Boongaloo.API.Controllers.GroupsController.Get(System.Int32)">
            <summary>
            Example: GET /api/v1/groups/{id:int}
            </summary>
            <param name="id">Unique identifier of a group</param>
            <returns>Specific group by its id.</returns>
        </member>
        <member name="M:Boongaloo.API.Controllers.GroupsController.GetUsers(System.Int32)">
            <summary>
            Example: GET api/v1/groups/{id:int}/users
            </summary>
            <param name="id">Unique identifier of the group you are getting the users from</param>
            <returns>All the users for a specific group</returns>
        </member>
        <member name="M:Boongaloo.API.Controllers.UsersController.Get(System.Int32)">
            <summary>
            Example: GET api/v1/users/{id:int}
            </summary>
            <param name="id">Unique identifier of the user. Not the one that comes from identity server.</param>
            <returns>User by his id</returns>
        </member>
        <member name="M:Boongaloo.API.Controllers.UsersController.GetUserByStsId(System.String)">
            <summary>
            Example: GET api/v1/users/{stsId:string}
            </summary>
            <param name="stsId">Base64 encoded STS id.</param>
            <returns>If there's such user in the system - UserDto is returned, otherwise null.</returns>
        </member>
        <member name="M:Boongaloo.API.Controllers.UsersController.Post(Boongaloo.DTO.BoongalooWebApiDto.RelateUserToGroupsDto)">
            <summary>
            Example: POST api/v1/users/ChangeGroupsSubscribtion
            </summary>
            <param name="userToGroupsModel">Body sample: {'userId':1, 'groupsUserSubscribes':[3, 105]}</param>
            <returns>Http.OK if the operation was successful or Http.500 if there was an error.</returns>
        </member>
        <member name="M:Boongaloo.API.Controllers.UsersController.Post(Boongaloo.Repository.BoongalooDtos.NewUserRequestDto)">
            <summary>
            Example: POST api/v1/users
            </summary>
            <param name="newUser">Body sample: {'idsrvUniqueId' : 'https://boongaloocompanysts/identity78f100e9-9d90-4de8-9d7d', 'firstName': 'Stefcho', 'lastName': 'Stefchev', 'email': 'used@to.know', 'about': 'Straightforward', 'gender': '0', 'birthDate': '0001-01-01T00:00:00', 'phoneNumber': '+395887647288', 'languageIds' : [1,3], 'groupIds': [1]}</param>
            <returns>Http status code 201 if user was succesfuly created or 500 if error has occured.</returns>
        </member>
        <member name="M:Boongaloo.API.Controllers.UsersController.Put(System.Int32,Boongaloo.Repository.BoongalooDtos.NewUserRequestDto)">
            <summary>
            Example: PUT api/v1/users/{id:int}
            </summary>
            <param name="id">Unique identifier of the user that will be updated</param>
            <param name="updateUserData">Updated user data</param>
            <returns></returns>
        </member>
        <member name="M:Boongaloo.API.Controllers.UsersController.GetSubscriptions(System.Int32)">
            <summary>
            Example: GET api/v1/users/{id:int}/subscriptions
            </summary>
            <param name="uid">Updated user data</param>
            <returns>List of integers which indicate the group ids to which the user is subscribed</returns>
        </member>
        <member name="M:Boongaloo.API.Controllers.UsersController.Put(System.Int32,Boongaloo.Repository.BoongalooDtos.EditUserNotificationsRequestDto)">
            <summary>
            Example: PUT api/v1/users/{id:int}/UpdateNotifications
            </summary>
            <param name="id">Unique identifier of the notification we are going to update</param>
            <param name="notifications">Body sample: </param>
            <returns></returns>
        </member>
        <member name="M:Boongaloo.API.Controllers.UsersController.GetNotificationSettings(System.Int32)">
            <summary>
            Example: api/v1/users/{id:int}/NotificationSettings
            </summary>
            <param name="id">Unique identifier for user. NOT Identity Server Id.</param>
            <returns>Latest notification settings set up by the user.</returns>
        </member>
    </members>
</doc>
