<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Boongaloo.API</name>
    </assembly>
    <members>
        <member name="T:Boongaloo.API.Controllers.ApiDocumentationController">
            <summary>
            Consider moving this helper controller away and replace it with proper documenting tool. E.g. Swagger/Swashbuckle.
            </summary>
        </member>
        <member name="M:Boongaloo.API.Controllers.AreaController.Get(System.Int32)">
            <summary>
            Example: GET /api/v1/areas/{id:int}
            </summary>
            <param name="id">Id of the area.</param>
            <returns>Returns area by its id.</returns>
        </member>
        <member name="M:Boongaloo.API.Controllers.AreaController.Get(System.Double,System.Double)">
            <summary>
            Example: GET /api/v1/areas/{lat:double}/{lon:double}/
            </summary>
            <param name="lat">Latitude</param>
            <param name="lon">Longitude</param>
            <returns>All the areas around coordinates.</returns>
        </member>
        <member name="M:Boongaloo.API.Controllers.AreaController.GetUsers(System.Int32)">
            <summary>
            Example: GET api/v1/areas/{id:int}/users
            </summary>
            <param name="id">Id of the area.</param>
            <returns>All the users falling into specific area</returns>
        </member>
        <member name="M:Boongaloo.API.Controllers.AreaController.Post(BusinessEntities.AreaDto)">
            <summary>
            Example: POST api/v1/areas
            </summary>
            <param name="area">The are we are currently creating</param>
            <returns></returns>
        </member>
        <member name="M:Boongaloo.API.Controllers.GroupsController.Get(System.Double,System.Double)">
            <summary>
            Example: GET /api/v1/groups/{lat:double}/{lon:double}/
            </summary>
            <param name="lat">Latitude</param>
            <param name="lon">Longitude</param>
            <returns>All the groups that contain this point(lat/lon) as part of their diameter</returns>
        </member>
        <member name="M:Boongaloo.API.Controllers.GroupsController.Post(BusinessEntities.GroupDto)">
            <summary>
            Example: POST /api/v1/groups/
            </summary>
            <param name="newGroup">Body sample:{'Name':'Second floor cooks', 'TagIds':[4,1], 'UserIds':[1], 'AreaIds': [1,2]}</param>
            <returns>HTTP Code 201 if successfuly created and 500 if not.</returns>
        </member>
        <member name="M:Boongaloo.API.Controllers.GroupsController.Post(BusinessEntities.GroupAsNewAreaDto)">
            <summary>
            Example: POST /api/v1/groups/AsNewArea
            </summary>
            <param name="newGroup">Body sample:{'Name':'Second floor cooks', 'TagIds':[4,1], 'UserIds':[1],'Latitude':42.657064, 'Longitude':23.28539, 'RadiusId':4}</param>
            <returns>Uniqe identifier of the newly created group entity</returns>
        </member>
        <member name="M:Boongaloo.API.Controllers.GroupsController.Get(System.Int32)">
            <summary>
            Example: GET /api/v1/groups/{id:int}
            </summary>
            <param name="id">Unique identifier of a group</param>
            <returns>Specific group by its id.</returns>
        </member>
        <member name="M:Boongaloo.API.Controllers.GroupsController.GetUsers(System.Int32)">
            <summary>
            Example: GET api/v1/groups/{id:int}/users
            </summary>
            <param name="id">Unique identifier of the group you are getting the users from</param>
            <returns>All the users for a specific group</returns>
        </member>
        <member name="M:Boongaloo.API.Controllers.UsersController.Get(System.Int32)">
            <summary>
            Example: GET api/v1/users/{id:int}
            </summary>
            <param name="id">Unique identifier of the user. Not the one that comes from identity server.</param>
            <returns>User by his id</returns>
        </member>
        <member name="M:Boongaloo.API.Controllers.UsersController.Post(Boongaloo.DTO.BoongalooWebApiDto.RelateUserToGroupsDto)">
            <summary>
            Example: POST api/v1/users/ChangeGroupsSubscribtion
            </summary>
            <param name="userToGroupsModel">{'UserId':int, 'GroupsSubscriptions':[{'GroupId':int, 'IsSubscribtionRequest':bool}]}</param>
            <returns>Http.OK if the operation was successful or Http.500 if there was an error.</returns>
        </member>
        <member name="M:Boongaloo.API.Controllers.UsersController.Post(Boongaloo.Repository.Entities.User)">
            <summary>
            Example: POST api/v1/users
            </summary>
            <param name="newUser">{'Id':int, 'IdsrvUniqueId':string, 'FirstName':string, 'LastName':string, 'Email':string,}</param>
            <returns>Http status code 201 if user was succesfuly created or 500 if error has occured.</returns>
        </member>
        <member name="M:Boongaloo.API.Controllers.UsersController.Put(System.Int32,Boongaloo.Repository.Entities.User)">
            <summary>
            Example: PUT api/v1/users/{id:int}
            </summary>
            <param name="id">Unique identifier of the user that will be updated</param>
            <param name="updateUserData">Updated user data</param>
            <returns></returns>
        </member>
    </members>
</doc>
